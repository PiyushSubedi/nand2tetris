// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maximumLength;
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength < 0) {
            do Sys.error(14);
        }

        if(maxLength > 0) {
            let str = Array.new(maxLength);
        }
        let maximumLength = maxLength;
        let length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(maximumLength > 0) {
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if((j < 0) | (j > length) | (j = length)) {
            do Sys.error(15);
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if((j < 0) | (j > length) | (j = length)) {
            do Sys.error(16);
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length = maximumLength) {
            do Sys.error(17);
        }
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length = 0) {
            do Sys.error(18);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int result;
        var int num;
        var boolean isNumber;
        var boolean isNeg;

        if(length = 0) {
            return 0;
        }

        let isNumber = true;
        if(str[0] = 45) {
            let isNeg = true;
            let i = 1;
        }

        while((i < length) & isNumber) {
            let num = str[i] - 48;
            let isNumber = ~((num < 0) | (num > 9));
            if(isNumber) {
                let result = result*10 + num;
                let i=i+1;
            }
        }

        if(isNeg) {
            let result = -result;
        }

        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, value;
        var Array intString;
        var boolean neg;

        if(maximumLength = 0) {
            do Sys.error(19);
        }

        let intString = Array.new(6);

        if(val < 0) {
            let neg = true;
            let val = -val;
        }

        let value = val;

        while(value > 0) {
            let value = val/10;
            let intString[i] = 48 + (val - (value*10));
            let i = i + 1;
            let val = value;
        }

        if(neg) {
            let intString[i] = 45;  // -
            let i = i + 1;
        }

        if(maximumLength < i) {
            do Sys.error(19);
        }

        if(i = 0) {
            let str[0] = 48;    // 0
            let length = 1;
        } else {
            let length = 0;
            while(length < i) { // reverse
                let str[length] = intString[i - (length + 1)];
                let length = length + 1;
            }
        }

        do intString.dispose();

        return;
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
